/**
  \symbol CP
*/
element CellParameters{

	/**
     random:
     \range 0..100
	*/
	parameter Unsigned aRANDOM = 100;

	/**
     north:
     \range 0..100
	*/
	parameter Unsigned bRED = 100;

	/**
     south:
     \range 0..100
	*/
	parameter Unsigned cBLUE = 100;

	/**
     west:
     \range 0..100
	*/
	parameter Unsigned dYELLOW = 100;

	/**
     east:
     \range 0..100
	*/
	parameter Unsigned eGREEN = 100;
}

/**
  \color #a50
  \symbol C
*/
element Cell : Bond{
	typedef Unsigned(6) Coord; 
	typedef Unsigned(6) SiteNum;
	typedef Unsigned(8) Byte;
	typedef Int(16)     Short;
	typedef Int(32)     Long;
	typedef Unsigned(3) Index;

	Random rm;


	SiteNum moveType = 0;
	Once once;
	//0 - random, 1 - east, 2 - north, 3 - south, 4 - west
	//purple      yellow    red        blue       green

  ARGB getColor(Unsigned selector) {
    ColorUtils cu;
    ARGB ret = cu.color(0x00000000U);
    if (moveType == 0 || moveType == 1 || moveType == 2) ret[1] = (Byte)(bondCount*63);
    if (moveType == 1 || moveType == 4) ret[2] = (Byte)(bondCount*63);
    if (moveType == 0 || moveType == 3) ret[3] = (Byte)(bondCount*63);
    return ret;
	}

	Void behave(){
		if (once.new()){
			CellParameters cp;
			Unsigned total = cp.aRANDOM + cp.bRED + cp.cBLUE + cp.dYELLOW + cp.eGREEN;
			Unsigned random = cp.aRANDOM;
			Unsigned red = random + cp.bRED;
			Unsigned blue = red + cp.cBLUE;
			Unsigned yellow = blue + cp.dYELLOW;
			Unsigned green = yellow + cp.eGREEN;

			Unsigned prob = (Unsigned)(rm.between(0, (Int)total));
			if (prob < random) moveType = 0;
			else if (prob < red) moveType = 2;
			else if (prob < blue) moveType = 3;
			else if (prob < yellow) moveType = 4;
			else moveType = 1;
		}
		if (active){
			findBonds();
			
			SiteNum s;
			if (moveType == 0 || rm.oneIn(3)) s = (SiteNum)rm.between(1, 4);
			else SiteNum s = moveType;
			moveTo(s);
		}
		drawBonds();
	}
}