/**
 /radius 1
*/

quark DataHolder{
  typedef Unsigned(30) Data;
  typedef Unsigned(6) SiteNumber;

  Data data;
  Bool hasData = false;
  Bool cooldown = false;

  EventWindow ew;

  /*
     hasdata = red
     cooldown = yellow
     resting = gray
  */
  ARGB getColor(Unsigned selector){
    ColorUtils cu;
    ARGB ret=cu.color(0xff00ff00u);
    ret[1] = 128;
    ret[2] = 128;
    ret[3] = 128;

    if (hasData){
      ret[1] = 255;
      ret[2] = 0;
      ret[3] = 0;
    }
    else if (cooldown){
      ret[1] = 255;
      ret[2] = 255;
      ret[3] = 0;
    }

    return ret;
  }

  /* returns true if the Dataholder is not in a cooldown */
  Bool canTransmit(){
    return !cooldown;
  }

  /* sets the data and the data flag*/
  Void setData(Data d){
    if (cooldown) return;
    data = d;
    hasData = true;
  }

  /*
    attempts to transmit data to other Dataholders around it
  */
  Void transmit(){
    if (!hasData || cooldown) return;
    Unsigned(3) count = 0;

    for (SiteNumber i = 1; i < 5; i++){
      Atom dh = ew[i];
      if (dh as DataHolder){
        if (dh.canTransmit()){
          dh.setData(data);
					count++;
        }
        ew[i] = (Atom)dh;
      }
    }
    //if (count > 0){
      hasData = false;
      cooldown = true;
    //}
  }

  /* checks to see if the element can go back to transsmiting data 
     if it can, sets the cooldown to false
  */
  Void checkCoolDown(){
    if (!cooldown) return;
    cooldown = false;
    for (SiteNumber i = 1; i < 5; i++){
      Atom dh = ew[i];
      if (dh as DataHolder){
        if (dh.hasData) cooldown = true;
      }
    }
  }
}

/**
 /color #888
*/
element Wire : DataHolder{
  Void behave(){
    transmit();
    checkCoolDown();
  }
}


/**
 \color #0e0
*/
element Transmitter : DataHolder{
  Random rm;
  Unsigned(8) fireRate = 0;  

  ARGB getColor(Unsigned selector){
    ColorUtils cu;
    ARGB ret=cu.color(0xff00ff00u);
    ret[1] = 0;
    ret[2] = 255;
    ret[3] = 0;

    if (hasData){
      ret[1] = 255;
      ret[2] = 0;
      ret[3] = 0;
    }
    else if (cooldown){
      ret[1] = 255;
      ret[2] = 255;
      ret[3] = 0;
    }
    
    return ret;
  }
  
  Void behave(){
    if (fireRate == 0){
      setData(data);
    }
    fireRate++;
    if (fireRate == 255) fireRate = 0;
    transmit();
    checkCoolDown();
  }
}

